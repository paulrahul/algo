/*
ID: paul.ra1
PROG: sort3
LANG: C++
*/

#include <iostream>
#include <fstream>

using namespace std;

int swap_done = 0;

void sswap(int section[][4], int s1, int n1, int s2, int n2) {
	int s = (section[s2][n2] < section[s1][n1]) ? section[s2][n2] : section[s1][n1];
	swap_done += s;
	section[s2][n2] -= s; section[s1][n1] -= s;
	section[s1][n2] += s; section[s2][n1] += s;

	// swap the surplus n2 via the other section.
	s = section[s2][n2];
	swap_done += 2 * s;
	int s3 = 6 - (s1 + s2);
	int n3 = 6 - (n1 + n2);
	section[s2][n2] -= s;
	section[s1][n3] -= s;
	section[s1][n2] += s;
	section[s3][n3] += s;
	
	section[s3][n1] -= s;
	section[s2][n1] += s;	
}

int main(int argc, char** argv) {
	ifstream fin("sort3.in");
	ofstream fout("sort3.out");
	
	int n;
	int arr[1000];
	
	int count[] = {0, 0, 0, 0};  // 1 index
	fin >> n;
	for (int i = 0; i < n; ++i) {
		fin >> arr[i];
		++count[arr[i]];
	}

	int section[4][4];  // 1 index
	for (int i = 1; i < 4; ++i) {
		for (int j = 1; j < 4; ++j) {
			section[i][j] = 0;
		}
	}

	for (int i = 0; i < n; ++i) {
		if (i < count[1]) {
			++section[1][arr[i]];
		} else if (i < (count[1] + count[2])) {
			++section[2][arr[i]];
		} else {
			++section[3][arr[i]];
		}
	}
	
	// First 1.
	// Swap with 2 in section 1.
	sswap(section, 1, 2, 2, 1);
	// Swap with 3 in section 3.
	sswap(section, 1, 3, 3, 1);
	
	// 2.
	// Swap with 3 in section 2.
	sswap(section, 2, 3, 3, 2);
	
	fout << swap_done << endl;
	
	return 0;
}