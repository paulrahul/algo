/*
ID: paul.ra1
PROG: sprime
LANG: C++
*/

#include <iostream>
#include <fstream>
#include <cmath>

using namespace std;

bool isPrime(int num) {
	if (num < 2) return false;
	if (num == 2 || num == 3) return true;
	if (num % 2 == 0 || num % 3 == 0) return false;
	int root = pow(num, 0.5) + 1;
	for (int i = 6; i <= root; i += 6) {
		if (num % (i - 1) == 0 || num % (i + 1) == 0) {
			return false;
		}
	}
	
	return true;
}

bool isSPrime(int num) {
	while (num > 0) {
		if (!isPrime(num)) {
			return false;
		}
		num /= 10;
	}
	
	return true;
}

char fd[] = {"2357"};
char nfd[] = {"1379"};
ofstream fout("sprime.out");

int conv_num(int digits[], int nd) {
	int num = 0;

	for (int i = 0; i < nd; ++i) {
		num = num * 10 + digits[i];
	}
	return num;
}

void genNcheck(int digits[], int nd, int ni) {
	if (ni == nd) {
		int num = conv_num(digits, nd);
		if (isSPrime(num)) {
			fout << num << endl;
		}
		
		return;
	}

	if (ni == 0) {
		// First digit can be 2, 3, 5, 7
		for (int i = 0; i < 4; ++i) {
			digits[ni] = fd[i] - '0';
			genNcheck(digits, nd, ni + 1);
		}
	} else {
		// Non-first digits can only be 1, 3, 7, 9	
		for (int i = 0; i < 4; ++i) {
			digits[ni] = nfd[i] - '0';
			genNcheck(digits, nd, ni + 1);
		}
	}
}

int main(int argc, char** argv) {
	ifstream fin("sprime.in");

	int n;
	fin >> n;

	int digits[10];
	genNcheck(digits, n, 0);

	return 0;
}